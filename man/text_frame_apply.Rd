% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/text_frame_apply.R
\name{text_frame_apply}
\alias{text_frame_apply}
\title{Apply function(s) with input from a data frame}
\usage{
text_frame_apply(
  text_frame,
  fun = NULL,
  id = NULL,
  ...,
  drop = TRUE,
  verbose = FALSE,
  envir = NULL,
  call_list = NULL
)
}
\arguments{
\item{text_frame}{Data frame to specify function arguments. See details.}

\item{fun}{fun}

\item{id}{id}

\item{...}{dots}

\item{drop}{drop}

\item{verbose}{verb}

\item{envir}{envir}

\item{call_list}{calll}
}
\description{
Apply function(s) with input from a data frame
}
\details{
Data frame where all variables are character and with parameter names as column names.
Each cell contains text with R code written as source code in a function call.
The parameter will be omitted when the cell is missing (\code{NA}).
The row names will be used as names in the output and can be used in selections with the \code{id} parameter.
With \code{fun = NULL}, the first column must contain function name(s) to be called.
}
\note{
This function is general and may be usable outside the pickmdl package.
}
\examples{
ax_plus_b <- function(a = 2, b = 3, x = 5) {a * x + b}
z <- data.frame(a = c("1", "2", NA), b = "7", x = c(NA, "9", "2"))
rownames(z) <- c("A", "B", "C")
z
text_frame_apply(z, "ax_plus_b", verbose = TRUE)
text_frame_apply(cbind(data.frame("ax_plus_b"), z))
text_frame_apply(z[c(1, 3)], "ax_plus_b", id = 1:2)
text_frame_apply(z[c(1, 3)], "ax_plus_b", b = 7, id = "B")
text_frame_apply(z[c(1, 3)], "ax_plus_b", call_list = list(b = 7))
text_frame_apply(z[c(1, 3)], "ax_plus_b", b = 1:2, id = "B", drop = FALSE)
text_frame_apply(z[3], "ax_plus_b", a = 1, call_list = list(b = 7))
}
